@page "/foundlist"
@using LostAndFoundWeb.Data
@using LostAndFoundWeb.Services
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext db
@inject StateContainer StateContainer
@attribute [StreamRendering]
@rendermode InteractiveServer
 <style>
     .row{
         height:100px;
     }
 </style>
<PageTitle>Weather</PageTitle>
@if(FoundItems is null)
{
    <p>Loading Lost Items...</p>
}
else
{
<div class="container">
    <div class="row">
        <div class="col">
            <InputText @bind-Value="Filter.WordOne" placeholder="WordOne"/>
        </div>
        <div class="col">
            <InputText @bind-Value="Filter.WordTwo" placeholder="WordTwo" />
        </div>
        <div class="col">
            <InputText @bind-Value="Filter.WordThree" placeholder="WordThree" />
        </div>
        <div class="col">
            <button type="button" class="btn btn-primary" @onclick="Search">Search</button>
        </div>
        <div class="col">
            <NavLink href="/makefounditem">
                <button class="btn btn-primary">Create Found</button>
            </NavLink>
        </div>
    </div>
    @if(ShowItems.Count < 1)
    {
        <p>There's no found items</p>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-4 g-1">
        @foreach (var item in ShowItems)
        {
            <div class="col">
                <div class="card" style="width: 16rem;">
                    <img src="@item.Urls[0]" style="height:14rem;"class="card-img-top" alt="...">
                    <div class="card-body">
                        <h5 class="card-title">@item.Name</h5>
                        <p class="card-text">@item.Location </p>
                    </div>
                    <ul class="list-group list-group-flush text-center">
                        <li class="list-group-item">@item.WordOne, @item.WordTwo, @item.WordThree</li>
                    
                    
                    </ul>
                    <div class="card-body text-center">
                        <NavLink href="FoundItemView">
                            <button class="btn btn-primary" @onclick="() => StateContainer.FoundItemLost(item)">Investigate</button>
                        </NavLink>
                    </div>
                </div>
            </div>
        }
        </div>  
    }
</div>
}

@code{
    private Input Filter { get; set; } = new();
    private List<FoundItem> FoundItems { get; set; } = new();
    private List<FoundItem> ShowItems{ get; set; }
    protected override async Task OnInitializedAsync()
    {
        FoundItems = db.FoundItems.Where(l => l.OwnerFound == false).ToList();
        ShowItems = FoundItems;
    }
    private async Task Search()
    {
        List<string> words = new List<string>() { Filter.WordOne, Filter.WordTwo, Filter.WordThree };
        if (String.IsNullOrEmpty(Filter.WordOne) && String.IsNullOrEmpty(Filter.WordTwo) && String.IsNullOrEmpty(Filter.WordThree))
        {
            ShowItems = FoundItems;
        }
        else
        {
            ShowItems = FoundItems.Select(l => new
            {
                item = l,
                MatchEvaluation = (words.Any(x => x.ToLower() == l.WordOne.ToLower()) ? 1 : 0) + (words.Any(x => x.ToLower() == l.WordTwo.ToLower()) ? 1 : 0) + (words.Any(x => x.ToLower() == l.WordThree.ToLower()) ? 1 : 0),
            })
            .Where(x => x.MatchEvaluation > 0)
            .OrderByDescending(x => x.MatchEvaluation)
            .Select(l => l.item).ToList();
        }
    }
    private sealed class Input
    {
        public string? WordOne { get; set; }
        public string? WordTwo { get; set; }
        public string? WordThree { get; set; }
    }
}